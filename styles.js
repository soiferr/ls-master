let result = 0, // сюда будем суммировать все вычисления
    number = 0, // это будет число, которое будет использоваться для вычислений
    sign, // здесь будет храниться текущий символ математической операции
    history = []; // сюда будем складывать всю историю вводимых пользователем данных

/*
    Первый бесконечный цикл мы создаем для того, чтобы запросить первое число,
    от которого будем отталкиваться в рассчетах
    Его мы можем сразу присвоить в результирующую переменную
*/
while (true) { // бесконечный цикл
    result = prompt('Введите первое число (по умолчанию 0)'); // запрашиваем первое число
    result = result ? result : 0; // если ничего не ввели или закрыли окно
    result = Number(result); // явно преобразуем то, что ввел пользователь в число
    if (!isNaN(result)) { // если не было ошибок при преобразовании типов
        history[history.length] = result; // сохраним в истории введенное пользователем число
        break; // и выходим из этого цикла
    }
    // иначе цикл начнется заново
}

/*
    Второй бесконечный цикл - здесь будет происходить основная логика
*/
while(true) { // бесконечный цикл
    /*
        Цикл для того, чтобы запросить у пользователя оператор
        и проверять, что он введен корректно
    */
    let signNotCorrect = true; // переменная выхода из цикла
    while (signNotCorrect) { // условие выхода - когда пользователь введет корректную операцию
        sign = prompt(`Первое число: ${result}\nВведите операцию: + - * / (по умолчанию +)`); // запрашиваем операцию
        sign = sign ? sign : "+"; // если ничего не ввели или закрыли окно
        switch (sign) {
            case "+":
            case "-":
            case "*":
            case "/":
                // введена корректная операция
                signNotCorrect = false; // меняем значение переменной выхода из цикла
                history[history.length] = sign; // сохраняем в истории введенную операцию
                break;
        }
    }

    /*
        Цикл аналогичный циклу, где мы запрашивали начальное число 
        Только здесь мы сохраняем введенное число в другую переменную
    */
    while (true) {
        number = prompt(`Первое число: ${result}\nОперация: ${sign}\nВведите второе число (по умолчанию 0)`);
        number = number ? number : 0; // если ничего не ввели или закрыли окно
        number = Number(number);
        if (!isNaN(number)) {
            // дополнительная проверка
            if (sign == '/' && number == 0) { // если нужно делить и ввели ноль
                alert('На ноль делить нельзя!');
            } else {
                history[history.length] = number;
                break;
            }
        }
    }

    // в зависимости от символ высчитываем результат
    switch (sign) {
        case "+":
            result += number;
            break;
        case "-":
            result -= number;
            break;
        case "*":
            result *= number;
            break;
        case "/":
            result /= number;
            break;
    }

    history[history.length] = result; // сохраняем в истории результат

    // выводим результат вычислений
    if (!confirm(`Итого: ${result}\nПродолжить вычисления?`)) {
        // если пользователь закрыл окно или нажал отмена
        break; // завершаем цикл
    }
}

// выводим историю вычислений
for(let i = 0; i < history.length - 1;) {
    console.log(history[i] + ' ' + history[++i] + ' ' + history[++i] + ' = ' + history[++i]);
}